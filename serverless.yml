org: photonadmin # Corresponds to the serverless.com account used for monitoring
app: photonranch

service: photonranch-status

package:
  patterns:
    - '!venv/**'
    - '!node_modules/**'

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-pitr
  - serverless-domain-manager
  - serverless-dynamodb
  - serverless-offline

custom:
  statusTable: photonranch-status-${self:provider.stage}
  phaseStatusTable: phase-status-${self:provider.stage}
  pitr: # enable point-in-time recovery
    - tableName: ${self:custom.statusTable}
      enabled: true

  # This is the 'variable' for the customDomain.basePath value, based on the stage.
  stage: 
    prod: status
    dev: dev
    test: test

  customDomain:
    domainName: 'status.photonranch.org'
    basePath: ${self:custom.stage.${self:provider.stage}}
    stage: ${self:provider.stage}
    createRoute53Record: true
    createRoute53IPv6Record: true
    autoDomain: true

  # This is for the local dynamodb instance
  dynamodb:
    stages: 
      - dev
    start:
      port: 9000
      inMemory: true
      migrate: true
      seed: true

    seed:
      domain:
        sources:
          - table: ${self:custom.statusTable}
            sources: [./sample_data/statusTable.json]
          - table: ${self:custom.phaseStatusTable}
            sources: [./sample_data/phaseStatusTable.json]


provider:
  name: aws
  stage: ${opt:stage, "dev"}
  runtime: python3.7
  region: us-east-1
  environment: 
    STATUS_TABLE: 
      Ref: statusTable
    PHASE_STATUS_TABLE:
      Ref: phaseStatusTable
    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}
  iam:
    role:
      statements:
        - Effect: Allow 
          Action: 
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.statusTable}*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.phaseStatusTable}*"

        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:GetQueueUrl
          Resource:
            - "arn:aws:sqs:${self:provider.region}:*:*"

resources: 
  Resources:
    # Configure API gateway "Gateway Responses" to work with CORS restrictions
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    # Define the dynamodb table we use to store site status
    statusTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.statusTable}
        AttributeDefinitions:
          - AttributeName: site 
            AttributeType: S
          - AttributeName: statusType
            AttributeType: S
        KeySchema:
          - AttributeName: site 
            KeyType: HASH
          - AttributeName: statusType
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    phaseStatusTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.phaseStatusTable}
        AttributeDefinitions:
          - AttributeName: site
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: site
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

functions:
  authorizerFunc: 
    handler: authorizer.auth
  postStatus:
    handler: handler.post_status_http
    events:
      - http:
          path: /{site}/status
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors: true

  getSiteCompleteStatus:
    handler: handler.get_site_complete_status
    events:
      - http:
          path: /{site}/complete_status
          method: get
          cors: true

  clearAllSiteStatus:
    handler: handler.clear_all_site_status
    events: 
      - http:
          path: /{site}/clear_all_status
          method: get
          cors: true

  getSiteStatus:
    handler: handler.get_site_status
    events: 
      - http: 
          path: /{site}/{status_type}
          method: get
          cors: true

  getAllOpenStatus:
    handler: handler.get_all_site_open_status
    events:
      - http:
          path: /allopenstatus
          method: get
          cors: true

  newPhaseStatus:
    handler: phase_status.post_phase_status
    events:
      - http:
          path: /phase_status
          method: post
          cors: true

  getPhaseStatus:
    handler: phase_status.get_phase_status
    events:
      - http:
          path: /phase_status/{site}
          method: get
          cors: true
  
  streamFunction:
    handler: handler.stream_handler
    events:
      - stream: 
          type: dynamodb
          arn: 
            Fn::GetAtt:
              - statusTable
              - StreamArn
