org: photonadmin # Corresponds to the serverless.com account used for monitoring
app: photonranch

service: photonranch-status

package:
  exclude:
    - venv/**
    - node_modules/**

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-pitr
  - serverless-domain-manager

custom:
  statusConnectionsTable: photonranch-status-connections
  statusTable: photonranch-status
  pitr: # enable point-in-time recovery
    - tableName: ${self:custom.statusTable}
      enabled: true

  # Make sure to first run 'serverless create_domain'
  customDomain:
    domainName: 'status.photonranch.org'
    basePath: 'status' 
    stage: ${self:provider.stage}
    createRoute53Record: true


provider:
  name: aws
  stage: dev
  runtime: python3.7
  region: us-east-1
  websocketsApiName: websockets-photonranch-status
  websocketsApiRouteSelectionExpression: $request.body.action
  environment: 
    STATUS_TABLE: ${self:custom.statusTable}
    STATUS_CONNECTION_TABLE: ${self:custom.statusConnectionsTable}
    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}
    WSS_URL:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "WebsocketsApi"
          - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
  iamRoleStatements:
    - Effect: Allow 
      Action: 
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        # needs to work for connecitons table and status table. 
        # can I include two resources here? Generic connection for now.
        #- "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.statusTable}*"
        #- "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.statusConnectionsTable}*"
        - "arn:aws:dynamodb:${self:provider.region}:*:*"

resources: # CloudFormation template syntax from here on.
  Resources:

    # Configure API gateway "Gateway Responses" to work with CORS restrictions
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    # Define the dynamodb table we use to store site status
    statusTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.statusTable}
        AttributeDefinitions:
          - AttributeName: site 
            AttributeType: S
          - AttributeName: statusType
            AttributeType: S
        KeySchema:
          - AttributeName: site 
            KeyType: HASH
          - AttributeName: statusType
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # Store the clients that are subscribed to status updates
    connectionsTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.statusConnectionsTable}
        AttributeDefinitions:
          - AttributeName: ConnectionID
            AttributeType: S
        KeySchema:
          - AttributeName: ConnectionID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  authorizerFunc: 
    handler: authorizer.auth
    cors: true
  postStatus:
    handler: handler.postStatusHttp
    events:
      - http:
          path: /{site}/status
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  getSiteDeviceStatus:
    handler: handler.getSiteDeviceStatus
    events:
      - http:
          path: /{site}/device_status
          method: get
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  getAllOpenStatus:
    handler: handler.getAllSiteOpenStatus
    events:
      - http:
          path: /allopenstatus
          method: get
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  
  connectionHandler:
    handler: handler.connection_manager
    events: 
      - websocket: 
          route: $connect
      - websocket:
          route: $disconnect
  
  updateSubscriberSite:
    handler: handler.updateSubscriberSite
    events:
      - websocket:
          route: updateSubscriberSite
  
  postStatusWs:
    handler: handler.postStatusWs
    events:
      - websocket:
          route: postStatus

  streamFunction:
    handler: handler.streamHandler
    events:
      - stream: 
          type: dynamodb
          arn: 
            Fn::GetAtt:
              - statusTable
              - StreamArn


